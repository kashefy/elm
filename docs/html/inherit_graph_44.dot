digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="elm::base_FilterBank",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__FilterBank.html",tooltip="base class for filter banks The interface should aid in iterating through response by defining differ..."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="elm::base_FilterBankLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__FilterBankLayer.html",tooltip="base class for filter banks The interface should aid in iterating through response"];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="elm::Gabors",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1Gabors.html"];
  Node4 [label="elm::base_Layer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__Layer.html",tooltip="The Layer base class Overloaded constructor calls overloaded Reset() so you can implement Reset(confi..."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="elm::AttentionWindow",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1AttentionWindow.html",tooltip="layer for sampling patch around attended location (e.g."];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="elm::base_LayerNotSupported",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__LayerNotSupported.html",tooltip="This is not an ordinary layer implementation This derived layer only aids in conditionally defined la..."];
  Node4 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="elm::base_LearningLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__LearningLayer.html",tooltip="class for defining interfaces of an abstract layer that can learn Overloaded constructor calls overlo..."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="elm::base_SupervisedBatch",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__SupervisedBatch.html",tooltip="class for defining interfaces of an abstract layer that can learn Overloaded constructor calls overlo..."];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="elm::MLP",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1MLP.html",tooltip="Layer class for mult-layer perceptrons."];
  Node4 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="elm::base_MatOutputLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__MatOutputLayer.html",tooltip="class for time-invariant layer"];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="elm::base_FeatureTransformationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__FeatureTransformationLayer.html",tooltip="An intermediate base class for prviding a layer interface involving a transformation of a single inpu..."];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="elm::base_SmoothLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__SmoothLayer.html",tooltip="intermediate Layer for applying smoothing algorithms I/O keys already defined by parent class..."];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="elm::MedianBlur",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1MedianBlur.html",tooltip="Wrap layer around median blur input and output keys defined by parent."];
  Node11 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 -> Node14 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="elm::DiffOfGaussians",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1DiffOfGaussians.html",tooltip="Layer for difference of gaussians."];
  Node11 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="elm::ImageGradient",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1ImageGradient.html",tooltip="Layer for computing image gradients using forward difference."];
  Node11 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="elm::LayerY",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1LayerY.html",tooltip="The LayerY class."];
  Node11 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="elm::WeightedSum",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1WeightedSum.html",tooltip="class to implement base layer methods Yields weighted sum of stimulus with 2 elements Simple example ..."];
  Node10 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="elm::GradAssignment",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1GradAssignment.html",tooltip="Layer for implementing Graduated Assignment algorithm for graph matching."];
  Node4 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="elm::base_PopulationCode",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__PopulationCode.html",tooltip="The base class for population codes."];
  Node19 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="elm::base_StatefulPopulationCode",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__StatefulPopulationCode.html",tooltip="a base class for population codes that are stateful"];
  Node19 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="elm::MutexPopulationCode",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1MutexPopulationCode.html",tooltip="Mutually exclusive population code (a.k.a simple pop."];
  Node19 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="elm::SoftMaxPopulationCode",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1SoftMaxPopulationCode.html",tooltip="Population code sampled from distribution (e.g."];
  Node4 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="elm::base_Reader",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__Reader.html"];
  Node23 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="elm::base_ReaderMNISTFile",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__ReaderMNISTFile.html",tooltip="base class for reading MNIST files"];
  Node24 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="elm::ReadMNISTImages",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1ReadMNISTImages.html",tooltip="class for Reading MNIST image data"];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="elm::ReadMNISTImagesTransl",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1ReadMNISTImagesTransl.html"];
  Node24 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="elm::ReadMNISTLabels",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1ReadMNISTLabels.html",tooltip="class for reading MNIST label data"];
  Node4 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="elm::base_SingleInputFeatureLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__SingleInputFeatureLayer.html",tooltip="base class for layer assuming single feature input, an intermediate layer implementation"];
  Node28 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="elm::SaliencyItti",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1SaliencyItti.html",tooltip="Implement Itti et al."];
  Node28 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="elm::SinkhornBalancing",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1SinkhornBalancing.html",tooltip="Layer for implementing Singhorn&#39;s balancing algorithm."];
  Node4 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="elm::base_SparseMatOutputLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__SparseMatOutputLayer.html",tooltip="intermediate layer class assuming single sparse matrix output"];
  Node31 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="elm::GraphCompatibility",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1GraphCompatibility.html"];
  Node4 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="elm::base_TIVLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1base__TIVLayer.html",tooltip="class for time-invariant layer"];
  Node4 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="elm::ICP",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1ICP.html",tooltip="class for an iterative-closest-point layer This is basciallly a wrapper around PCL&#39;s ICP implementati..."];
  Node4 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="elm::Triangulation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1Triangulation.html",tooltip="The triangulation layer wraps around the greedy projection algorithm usign pcl."];
  Node36 [label="elm::YNeuron",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classelm_1_1YNeuron.html",tooltip="layer for trivial spiking neuron."];
  Node36 -> Node16 [dir="back",color="darkgreen",fontsize="10",style="solid",fontname="Helvetica"];
}
