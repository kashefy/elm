version: 0.0.{build}
os: unstable

branches:
  except:
    - /travis.*/

# scripts that are called at very beginning, before repo cloning
init:
  - cmd: cmake --version
  - cmd: msbuild /version
  
clone_depth: 5

environment:
  BOOST_ROOT: C:\Libraries\boost
  BOOST_LIBRARYDIR: C:\Libraries\boost\lib32-msvc-12.0
  CONFIGURATION: "Release"
  matrix:
    - generator: "Visual Studio 12 2013"
    #- generator: "NMake Makefiles"
#cache:
  #- C:\ProgramData\chocolatey\bin -> appveyor.yml
  #- C:\ProgramData\chocolatey\lib -> appveyor.yml
  #- packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
  #- C:\OpenCV249 -> appveyor.yml
  #- C:\OpenCV249\opencv\build\x86\mingw_static -> appveyor.yml
install:
  # install python packages (i.e. pip, numpy)
  #- powershell .\\ci\\appveyor\\install.ps1
  #- "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - set PATH=C:\MinGW\bin;%PATH%
  - ls C:/Libraries/boost
  - ls C:\
  - cmd: choco install opencv -y
  - cmd: SET APP_PATH=%CD%
  - ps: ls C:\OpenCV249\opencv\build\x86
  - ps: mkdir C:\OpenCV249\opencv\build\x86\mingw_static
  - cmd: CD C:\OpenCV249\opencv\build\x86\mingw_static
  - ps: mv "C:\Program Files (x86)\Git\bin\sh.exe" "C:\Program Files (x86)\Git\bin\shxx.exe"
  # Restore building MinGW when Boost libraries become available
  #- cmd: cmake -G "%generator%" -DBUILD_SHARED_LIBS=OFF -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_ts=OFF -DBUILD_opencv_gpu=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_calib3d=OFF -DBUILD_opencv_ocl=OFF -DBUILD_opencv_nonfree=OFF -DBUILD_opencv_contrib=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_stitching=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_videostab=OFF -Wno-dev C:\OpenCV249\opencv\sources > NUL
  #- cmd: mingw32-make > NUL
  - cmd: CD %APP_PATH%
  - cmd: CD ..
  - appveyor DownloadFile https://googletest.googlecode.com/files/gtest-1.7.0.zip
  - 7z x .\gtest-1.7.0.zip -y > NUL
  - cmd: CD gtest-1.7.0
  # Restore building MinGW when Boost libraries become available
  #- cmd: cmake -G "%generator%" . > NUL
  #- cmd: mingw32-make > NUL
  - cmd: cmake -G "%generator%" -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=%CONFIGURATION% . > NUL
  - cmd: if "%generator%"=="Visual Studio 12 2013" msbuild gtest.sln /p:Configuration=%CONFIGURATION%
  - cmd: if "%generator%"=="NMake Makefiles" nmake
  # move build artifacts to GTEST_ROOT for cmake to find it later (only needed with VS generator)
  - cmd: if "%generator%"=="Visual Studio 12 2013" move .\%CONFIGURATION%\gtest* .\
  - ps: mv "C:\Program Files (x86)\Git\bin\shxx.exe" "C:\Program Files (x86)\Git\bin\sh.exe"
  # return to repo dir
  - cmd: CD %APP_PATH%
before_build:
  - cmd: mkdir ..\build
  - cmd: CD ..\build
  - ps: mv "C:\Program Files (x86)\Git\bin\sh.exe" "C:\Program Files (x86)\Git\bin\shxx.exe"
  - set PATH=C:\MinGW\bin;%PATH%
  # Restore building MinGW when Boost libraries become available
  #- cmd: cmake -G "%generator%" -DOpenCV_DIR=C:\OpenCV249\opencv\build\x86\mingw_static -DGTEST_ROOT=..\gtest-1.7.0 -DBOOST_ROOT=C:\Libraries\boost -DWITH_PCL=OFF -DWITH_MATIO=OFF ..\elm
  - cmd: cmake -G "%generator%" -DGTEST_ROOT=..\gtest-1.7.0 -DBOOST_ROOT="%BOOST_ROOT%" -DBOOST_LIBRARYDIR="%BOOST_LIBRARYDIR%" -DBoost_USE_STATIC_LIBS=ON -DBoost_USE_MULTITHREADED=ON -DOpenCV_DIR=C:\OpenCV249\opencv\build\ -DWITH_PCL=OFF -DWITH_MATIO=OFF -DWITH_WARNINGS_ALL=OFF -DCMAKE_CXX_FLAGS="/W0" -DCMAKE_BUILD_TYPE=%CONFIGURATION% ..\elm
  - ps: mv "C:\Program Files (x86)\Git\bin\shxx.exe" "C:\Program Files (x86)\Git\bin\sh.exe"
build_script:
  - set PATH=C:\MinGW\bin;%PATH%
  #- cmd: mingw32-make
  - cmd: if "%generator%"=="Visual Studio 12 2013" msbuild elm.sln /p:Configuration=%CONFIGURATION%
  - cmd: if "%generator%"=="NMake Makefiles" nmake
test_script:
  - cmd: CD .\bin
  - cmd: if "%generator%"=="Visual Studio 12 2013" cd .\Release
  - set PATH=C:\OpenCV249\opencv\build\v12\bin;..\gtest-1.7.0;%PATH%
  - cmd: .\run_elm_unittests.exe --gtest_output=xml:results_unittests.xml --gtest_filter=-*PODTypesTest*.*:SignalTP*.*:*.FullTestName 
after_test:
  # upload results to AppVeyor
  - $wc = New-Object 'System.Net.WebClient'
  - $wc.UploadFile("https://ci.appveyor.com/api/testresults/xunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path results_unittests.xml))
# to run your custom scripts instead of provider deployments
deploy_script:
  - cmd: ECHO "NOTHING TO DEPLOY"
on_success:
  - cmd: ECHO "NOTHING TO DO ON SUCCESS"
