# - Config file for the @ROOT_PROJECT_UPPER@ package
# ===================================================================================
#  The @ROOT_PROJECT_UPPER@ CMake configuration file
#  Config file for the @ROOT_PROJECT_UPPER@ package
#
#  Usage from an external project:
#    In your project's CMakeLists.txt, add these lines:
#
#    FIND_PACKAGE(@ROOT_PROJECT_UPPER@ REQUIRED)
#	 include_directories(${@ROOT_PROJECT_UPPER@_INCLUDE_DIRS})
#    TARGET_LINK_LIBRARIES(MY_TARGET_NAME ${@ROOT_PROJECT_UPPER@_LIBS})
#
#    Searching for specific @ROOT_PROJECT_UPPER@ modules not supported yet.
#
#    If the packages are found then @ROOT_PROJECT_UPPER@_FOUND is set to TRUE/ON.
#
#    This file will define the following variables:
#      - @ROOT_PROJECT_UPPER@_LIBS                     : The list of libraries to link against.
#      - @ROOT_PROJECT_UPPER@_LIB_DIR                  : The directory(es) where lib files are. Calling LINK_DIRECTORIES
#                                          with this path is NOT needed.
#      - @ROOT_PROJECT_UPPER@_INCLUDE_DIRS             : The @ROOT_PROJECT_UPPER@ include directories.
#	   - @ROOT_PROJECT_UPPER@_DEPS_LIBS				  : @ROOT_PROJECT_UPPER@ dependency libraries
#	 
#		TODO: define and expose version variables
#      - @ROOT_PROJECT_UPPER@_VERSION                  : The version of this package build. Example: "2.4.0"
#      - @ROOT_PROJECT_UPPER@_VERSION_MAJOR            : Major version part of @ROOT_PROJECT_UPPER@_VERSION. Example: "2"
#      - @ROOT_PROJECT_UPPER@_VERSION_MINOR            : Minor version part of @ROOT_PROJECT_UPPER@_VERSION. Example: "4"
#      - @ROOT_PROJECT_UPPER@_VERSION_PATCH            : Patch version part of @ROOT_PROJECT_UPPER@_VERSION. Example: "0"
#
# ===================================================================================
#

cmake_minimum_required(VERSION 2.8.7)

set(@ROOT_PROJECT_UPPER@_FOUND FALSE)
 
#----------------------------------------------------------------------------
# Compute paths
#----------------------------------------------------------------------------
get_filename_component(@ROOT_PROJECT_UPPER@_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH CACHE)

get_filename_component(PARENT_DIR ${@ROOT_PROJECT_UPPER@_CMAKE_DIR} PATH)

# Are we inside an install prefix or in a build directory?
if(EXISTS ${@ROOT_PROJECT_UPPER@_CMAKE_DIR}/modules AND IS_DIRECTORY ${@ROOT_PROJECT_UPPER@_CMAKE_DIR}/modules)
	
	#build directory
	#message(AUTHOR_WARNING "build directory")
	# Provide the include directories to the caller
    set(@ROOT_PROJECT_UPPER@_INCLUDE_DIRS @ROOT_PROJECT_INCLUDE_DIRS@)

        set(@ROOT_PROJECT_UPPER@_LIB_DIR ${@ROOT_PROJECT_UPPER@_CMAKE_DIR}/lib)
	
elseif(EXISTS ${PARENT_DIR}/../include AND IS_DIRECTORY ${PARENT_DIR}/../include)
	
	# install prefix
	#message(AUTHOR_WARNING "install prefix")
        set(@ROOT_PROJECT_UPPER@_INCLUDE_DIRS ${PARENT_DIR}/../include)
        set(@ROOT_PROJECT_UPPER@_LIB_DIR ${PARENT_DIR}/../lib)

else()
	#message(STATUS "???")
endif()

# Compute paths...Done
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# populate @ROOT_PROJECT_UPPER@ libs
#----------------------------------------------------------------------------
set(@ROOT_PROJECT_UPPER@_MODULE_NAMES @ROOT_PROJECT_MODULES@)
set(@ROOT_PROJECT_UPPER@_LIBS "")
foreach(@ROOT_PROJECT_UPPER@_MODULE_NAME ${@ROOT_PROJECT_UPPER@_MODULE_NAMES})

        set(@ROOT_PROJECT_UPPER@_MODULE_BASENAME ${@ROOT_PROJECT_UPPER@_LIB_DIR}/${@ROOT_PROJECT_UPPER@_MODULE_NAME})
        file(GLOB @ROOT_PROJECT_UPPER@_MODULE_LIB_MATCHES "${@ROOT_PROJECT_UPPER@_LIB_DIR}/*${@ROOT_PROJECT_UPPER@_MODULE_NAME}*")
	list(APPEND @ROOT_PROJECT_UPPER@_LIBS ${@ROOT_PROJECT_UPPER@_MODULE_LIB_MATCHES})
endforeach()

# verify it's not an empty lib directory
list(LENGTH @ROOT_PROJECT_UPPER@_LIBS @ROOT_PROJECT_UPPER@_NB_LIBS)

if(${@ROOT_PROJECT_UPPER@_NB_LIBS})
	set(@ROOT_PROJECT_UPPER@_FOUND TRUE)
else(${@ROOT_PROJECT_UPPER@_NB_LIBS})
	set(@ROOT_PROJECT_UPPER@_FOUND FALSE)
    message(FATAL_ERROR "Identified ${@ROOT_PROJECT_UPPER@_NB_LIBS} @ROOT_PROJECT_UPPER@ libs.")
endif(${@ROOT_PROJECT_UPPER@_NB_LIBS})

# reorder them from depdendent to independent modules
list(REVERSE @ROOT_PROJECT_UPPER@_LIBS)

#----------------------------------------------------------------------------
# populate @ROOT_PROJECT_UPPER@ libs...Done.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Dependencies
#----------------------------------------------------------------------------
# 
# Dependency includes:

# already covered

# Dependency libs:
set(@ROOT_PROJECT_UPPER@_DEPS_LIBS @ROOT_PROJECT_DEPS@)

# Dependency preprocessor macros
if(@PCL_FOUND@)
    message(STATUS "@ROOT_PROJECT_UPPER@ with PCL support.")
    add_definitions(-D__WITH_PCL)
    set(@ROOT_PROJECT_UPPER@_WITH_PCL ON)
endif()

if(@MATIO_FOUND@)
    message(STATUS "@ROOT_PROJECT_UPPER@ with MATIO support.")
    add_definitions(-D__WITH_MATIO)
    set(@ROOT_PROJECT_UPPER@_WITH_MATIO ON)
endif()

# Dependencies...Done.
#----------------------------------------------------------------------------
