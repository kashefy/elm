# - Config file for the ELM package
# ===================================================================================
#  The ELM CMake configuration file
#  Config file for the ELM package
#
#  Usage from an external project:
#    In your project's CMakeLists.txt, add these lines:
#
#    FIND_PACKAGE(ELM REQUIRED)
#	 include_directories(${ELM_INCLUDE_DIRS})
#    TARGET_LINK_LIBRARIES(MY_TARGET_NAME ${ELM_LIBS})
#
#    Searching for specific ELM modules not supported yet.
#
#    If the packages is found then ELM_FOUND is set to TRUE/ON.
#
#    This file will define the following variables:
#      - ELM_LIBS                     : The list of libraries to link against.
#      - ELM_LIB_DIR                  : The directory(es) where lib files are. Calling LINK_DIRECTORIES
#                                          with this path is NOT needed.
#      - ELM_INCLUDE_DIRS             : The ELM include directories.
#	   - ELM_DEPS_LIBS				  : ELM dependency libraries
#	 
#		TODO: define and expose version variables
#      - ELM_VERSION                  : The version of this package build. Example: "2.4.0"
#      - ELM_VERSION_MAJOR            : Major version part of ELM_VERSION. Example: "2"
#      - ELM_VERSION_MINOR            : Minor version part of ELM_VERSION. Example: "4"
#      - ELM_VERSION_PATCH            : Patch version part of ELM_VERSION. Example: "0"
#
# ===================================================================================
#

cmake_minimum_required(VERSION 2.8.7)

set(ELM_FOUND FALSE)
 
#----------------------------------------------------------------------------
# Compute paths
#----------------------------------------------------------------------------
get_filename_component(ELM_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH CACHE)

get_filename_component(PARENT_DIR ${ELM_CMAKE_DIR} PATH)

# Are we inside an install prefix or in a build directory?
if(EXISTS ${ELM_CMAKE_DIR}/modules AND IS_DIRECTORY ${ELM_CMAKE_DIR}/modules)
	
	#build directory
	#message(AUTHOR_WARNING "build directory")
	# Provide the include directories to the caller
    set(ELM_INCLUDE_DIRS @ROOT_PROJECT_INCLUDE_DIRS@)

        set(ELM_LIB_DIR ${ELM_CMAKE_DIR}/lib)
	
elseif(EXISTS ${PARENT_DIR}/../include AND IS_DIRECTORY ${PARENT_DIR}/../include)
	
	# install prefix
	#message(AUTHOR_WARNING "install prefix")
        set(ELM_INCLUDE_DIRS ${PARENT_DIR}/../include)
        set(ELM_LIB_DIR ${PARENT_DIR}/../lib)

else()
	#message(STATUS "???")
endif()

# Compute paths...Done
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# populate ELM libs
#----------------------------------------------------------------------------
set(ELM_MODULE_NAMES @ROOT_PROJECT_MODULES@)
set(ELM_LIBS "")
foreach(ELM_MODULE_NAME ${ELM_MODULE_NAMES})

        set(ELM_MODULE_BASENAME ${ELM_LIB_DIR}/${ELM_MODULE_NAME})
        file(GLOB ELM_MODULE_LIB_MATCHES "${ELM_LIB_DIR}/*${ELM_MODULE_NAME}*")
	list(APPEND ELM_LIBS ${ELM_MODULE_LIB_MATCHES})
endforeach()

# verify it's not an empty lib directory
list(LENGTH ELM_LIBS ELM_NB_LIBS)

if(${ELM_NB_LIBS})
	set(ELM_FOUND TRUE)
else(${ELM_NB_LIBS})
	set(ELM_FOUND FALSE)
    message(FATAL_ERROR "Identified ${ELM_NB_LIBS} ELM libs.")
endif(${ELM_NB_LIBS})

# reorder them from depdendent to independent modules
list(REVERSE ELM_LIBS)

#----------------------------------------------------------------------------
# populate ELM libs...Done.
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Dependencies
#----------------------------------------------------------------------------
# 
# Dependency includes:

# already covered

# Dependency libs:
set(ELM_DEPS_LIBS @ROOT_PROJECT_DEPS@)

# Dependency preprocessor macros
if(@PCL_FOUND@)
    message(STATUS "ELM with PCL support.")
    add_definitions(-D__WITH_PCL)
    set(@ROOT_PROJECT_UPPER@_WITH_PCL ON)
endif()

if(@MATIO_FOUND@)
    message(STATUS "ELM with MATIO support.")
    add_definitions(-D__WITH_MATIO)
    set(@ROOT_PROJECT_UPPER@_WITH_MATIO ON)
endif()

# Dependencies...Done.
#----------------------------------------------------------------------------
